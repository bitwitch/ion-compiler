Exercise 2.1
------------------------------------------------------------------------------
x + y + z
                    simpleArithmeticExpression
                                |             
                simpleArithmeticExpression + term
                        /                      |
  simpleArithmeticExpression + term          factor
              |                 |              |
            term              factor        primary                                   
              |                 |              |
            factor           primary        variable
              |                 |              |
           primary           variable          z
              |                 |
           variable             y
              |
              x

x * y + z
                    simpleArithmeticExpression
                                |             
                simpleArithmeticExpression + term
                        /                      |
                     term                    factor
                      /                        |
              term * factor                 primary
              /         \                      |
          factor        primary             variable
           |               |                   |
        primary         variable               z
           |               |
        variable           y
           |
           x


Exercise 2.2
------------------------------------------------------------------------------
Find at least two different structures for the following expressions and
statements. Let A and B stand for "basic statements".

IF a THEN b ELSE c = d
IF a THEN IF b THEN A ELSE B
IF a THEN FOR ... DO IF b THEN A ELSE B

Propose an alternative syntax which is unambiguous.


IF a THEN b ELSE c = d
                                    conditionalStatement
                                             |
                                  ifStatement  ELSE  statement
                                  /                         \
IF BooleanExpression THEN unconditionalStatement       unconditionalStatement
       |                      |                              |
  simpleBoolean        basicStatement                       ...
       |                      |                              |
   implication                b                           relation
       |                                                     |
      ...                               arithmeticExpression relationalOperator arithmeticExpression
       |                                       |                     |                   |
       a                                      ...                    =                  ...
                                               |                                         |
                                               c                                         d




                  BooleanExpression 
                         |
IF BooleanExpression THEN simpleBoolean ELSE BooleanExpression
           |                   |                    |
          ...                 ...                  ...
           |                   |                    |
           a                   b    arithmeticExpression relationalOperator arithmeticExpression
                                            |                     |                   |
                                           ...                    =                  ...
                                            |                                         |
                                            c                                         d


Exercise 3.1
------------------------------------------------------------------------------
Sentences of regular languages can be recognized by finite state machines. They
are usually described by transition diagrams. Each node represents a state, and
each edge a state transition. The edge is labelled by the symbol that is read by
the transition. Consider the following diagrams and describe the syntax of the
corresponding languages in EBNF. 

                       o
                   ┌--------┐
                   |        |
     a        (    v   x    |   )
[ ]----->[ ]----->[ ]----->[ ]----->[ ]

language = a "(" x {ox} ")"


              b
          ┌--------┐
          |        |
     a    v   +    | 
[ ]----->[ ]----->[ ]<--┐
          |        |    |
        . |      c |    | *
          v        v    |
         [ ]      [ ]---┘      

language = a {addition} .
addition = + ( b | multiplication)
multiplication = c * (multiplication | b)

