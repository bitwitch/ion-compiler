@foreign func malloc(size: uint): void* {}
@foreign func free(ptr: void*) {}
@foreign func fopen(filename: char*, mode: char*): void* {}
@foreign func fclose(file: void*): void {}

struct Window {
	title: char*;
}

func create_window(title: char*): Window* {
	window: Window* = malloc(sizeof(:Window));
	// window.title = title;
	return window;
}

func destroy_window(window: Window*) {
	free(window);
}


func main(argc: int, argv: char**): int {
	window := create_window("Taco");
	defer destroy_window(window);

	cond1 := false;
	cond2 := false;
	cond3 := true;
	cond4 := false;
	val := 69;
	while (1) {
		file := fopen("foo.txt", "r");
		defer fclose(file);

		if (cond1) {
			return 0;
		}
		if (cond2) {
			continue;
		}
		if (cond3) {
			mem := malloc(8);
			defer free(mem);
			if (cond3) {
				break;
			}
		}

		switch (val) {
			case 1:
				m1 := malloc(1);
				defer free(m1);
			case 2:
				return 0;
			default:
				m2 := malloc(1);
				defer free(m2);
				continue;
		}
	}
	return 0;
}


// should generate the following c code

// int main(int argc, char **argv) {
	// Window *window = create_window("Taco");

	// bool cond1 = false;
	// bool cond2 = false;
	// bool cond3 = true;
	// bool cond4 = false;
	// while (1) {
		// FILE *file = fopen("foo.txt", "r");

		// if (cond1) {
			// fclose(file);
			// destroy_window(window);
			// return 0;
		// }
		// if (cond2) {
			// fclose(file);
			// continue;
		// }
		// if (cond3) {
			// char *mem = malloc(8);
			// if (cond3) {
				// free(mem);
				// fclose(file);
				// break;
			// }
			// free(mem);
		// }
		// fclose(file);
	// }

	// destroy_window(window);
	// return 0;
// }




// approach
// - create a new statement type, ast node
// - parse defer statements
// - resolve it immediately 
//	  - make sure that no statments inside a defer break, return, etc.
// - c codegen
	// - keep a stack of defer statements
	// - on scope exit (break, continue, reached }) unwind the innermost scope and
	  // generate c statements for each statement on the stack
	// - on scope exit (return) unwind the entire stack of defers





































