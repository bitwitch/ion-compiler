TODO:
[ ] break larege resolve_expr switch cases into functions: ternary, index, field

[X] symbol renaming on import
    [ ] c codegen should output the original symbol name (although with any
        package prefixes to avoid duplicate names)

[ ] change increment operation from a statement to an expression
  [ ] allow pre-increment
	[ ] support increment expression in array index
			e.g.  deck[card_index++] = Card{num=1, symbol='A', face_down=true, prev=prev};

[ ] static assert 

[ ] const qualifiers ??

[ ] output line directives to the c compiler (preprocessor technically, i
    think) to allow debugging ion source code

[ ] currently array sizes are limited by int type, i should probably allow
    64-bit unsigned

[ ] packages
    [X] physical organization, compiling multile ion files in a directory
    [X] dependency management, specifying which packages symbols you depend on
    [ ] namespacing
    [X] compiler takes package (directory name) on command line
    [ ] issue user friendly message for when a single .ion file is passed (could
        also just support compiling both single ion files and packages??)

[ ] importing a package that has a foreign function and declaring the same
    foreign function in the current package yields a duplicate symbol error. but
    this should probably work, right??

[ ] return and continue statements inside switch cases should NOT be followed by
    an implicit break

[ ] issue warnings for conversions that could potentially lose information
    (truncations)

[ ] think about removing var keyword, could just look ahead to see if the next
		token is ':' to tell if it is a DECL_VAR

[ ] control flow analysis, like detecting if all branches of an if statement
    return a value if they should

[ ] build a simple system to compile all the test packages and maybe check them
    against a reference file

[ ] define multiple variables of the same type with commas:
    a, b: int;
    var j, k: int;
    struct int2 {
        x, y: int;
    }

[ ] preserve comments for c codegen

[ ] free dynamic arrays used in ast node creation, many ast nodes use ast_memdup
    to copy over data from dynamic arrays, the caller of that ast node
    constructor can now free the dynamic array, but there are places where i
    don't do this

[ ] comments
	[X] single line
	[ ] multi line 
	
[ ] string escape chars
    [X] \n, \t, \\, \', \"
    [X] \a, \b, \e, \f, \v, \?
    [X] \xhh (hex)
    [ ] \nnn (octal)
    [ ] \uhh... (unicode or universal character names)

[ ] declarations in functions (statement declarations)
	- like an enum, or struct declared inside a function

[ ] local_syms should probably be a stretchy buffer

[ ] improve error messages
    [ ] if a ';' follows a '}' in a top level declaration, should have a more
        user friendly message to deal with this than "expected top level
        declaration, got ';'"

[ ] should string literals in var decls and init statements decay to pointer
    types or nah?? (s := "farts"; --> char *s = "farts";)


DONE:
[X] when importing all symbols from a package, ignore the main symbol. this
    should allow programmers to create packages that can be used as an
    executable and also as a library
[X] constant expression evaluation
    [X] binary exprs
    [X] unary exprs
[X] support trailing commas in compound literals
[X] c codegen needs to prefix decl names with a package prefix to avoid
    name collisions with other packages
[X] add a parameter to foreign directives to allow assigning an external name to
    the declaration: @foreign("external_name") ...
  [X] codegen should generate the external name for all usages (for example if a
			typedef has a foreign external name, that is the name that should be used
      any time a variable of that type is declared
[X] move builtin package to an actual package in system_packages
[X] change cast syntax from cast(type, val) to type(val)
  [X] change codegen for call exprs that are casts
[X] resolving constants
    integers with suffixes: l, ll, u, ul, ull
[X] codegen for variable declarations of enum type always uses type int instead
    of the enum name, it should use the enum name for everything but anonymous
    enums
[X] anonymous enums
[X] allow implicitly sized arrays
	[X] handle this case: arr[] = {1,2,3,4, [10]=69};  (size is 11 here)
[X] support named parameters in function pointers
		func(userdata: void*, event: SDL_Event*): int;
		as an alternative to func(void*, SDL_Event*): int;
[X] designated initializers ( pos := Vec3{x=6, y=9} )
[X] implement read_dir() on linux (in os_unix.c)
[X] some buffer bug, maybe overflow
		- compiling solitaire package yielded following output:
			  Adding package search path C:/Users/shmow/code/ion-compiler/system_packages
			  Adding package search path .
			  Importing solitaire
			  Importing libc
			  Importing noir
			  @_▀▄÷⌂:2: error: duplicate definition of global symbol 'printf'.
			  Assertion failed: 0, file C:\Users\shmow\code\ion-compiler\error.c, line 30
    - SOLVED: the issue was the string passed into init_stream() was not
      interned, so the string was getting overwritten later
[X] compile to a file with the same name as the source file but swap extension
[X] foreign c includes (basically "preprocessor" directives)
    [X] in resolution, check that foreign directives with include args have
        values with string type 
[X] handle generating . vs -> for field access of values vs pointers in c
    codegen
[X] in resolution: when we encounter a function DEFINITION, at that point we
    need to resolve the function body. however, any other reference to the
    function, like a call expression, should resolve the function signature, but
    NOT the function body. Importantly the function must also not be added to
    the ordered symbol table until after its body has been resolved
		[X] my previous attempts to address this have conflicted with resolving
        recursive functions, so need to make sure recursive functions still
        resolve correctly
[X] defer statements
    [X] disallow return, break, continue in defer statements
    - statements are typechecked in the context of the defer statement
    - at scope exit, defer statements execute in stack order
    - see https://youtu.be/Oeqeqw4OHPE?t=2595
    - the sort of "macro expansion" (by analogy) kind of defer only works
      if we explicitly disallow shadowed local variables
[X] hash table
  [X] replace the linear search in str_intern
  [X] replace other naive linear searches
[X] compound literals: generate explicit type "cast" in c-syntax only when
    compound literal is used in a non initializer context
[x] handle compound literal arrays in implicit contexts like a function call
    right now it decays to a ptr and so type checking fails
[X] profiling (tried out superluminal, it is nice) confirms that
    str_intern_range is the hottest function in the program. speed it up with a
    hashmap
[X] issues with warnings being printed to stdout when redirecting output of
    compilation to a file. should probably separate errors/warnings to printing
    to stderr
[X] types for hex and oct literals need to grow to unsigned if necessary, see c
    spec section 6.4.4.1
[X] evaluate constants that are binary or unary expressions
    e.g.  const n0 = 1 + sizeof(p0);
[X] when casting, if type is const, need to do type conversion of the constant
    value (possible truncation)
[X] implicit break for switch cases
	[X] support commas in switch cases for multiple case expressions to use the
			same block, this alleviates need for fallthrough
[X] resolving constants
	[X] integer (see c standard section 6.4.4.1)
	[x] floats
	[X] doubles with d suffix
	[X] character
  [X] octal constants
  [X] binary constants
  [X] hex constants
[X] implement the different integer types (uint, etc.)
[X] integer promotions and implicit conversions 
	[X] binary expressions
	[X] ternary exprs
	[X] var decls
	[X] init stmts
	[X] assignment stmts
	[X] compound exprs
	[X] function calls
	[X] switch expr
	[X] switch case exprs
	[X] condition exprs (if, for, do/while, ternary)
[X] in ast nodes, be consistent about calling things typespec always when they
    are Typespec to differentiate from Type
[X] array pointer decay
[X] move true and false to symbol table instead of keywords
[X] built in NULL 
[X] creating bindings to c functions like printf
[X] the backpointer from type to its symbol not being set correctly
[X] character literals
[\] var args (...)
	[X] enforce at least one param must precede ... 
	[X] enforce ... must be last argument
[X] c codegen
	[X] forward declaring struct, union, enums
	[X] functions
	[X] statements
	[X] constants
	[X] use gen_typespec_c wherever possible to retain more syntactic information
			(for example an expression for an array size rather than just a resolved constant value)
[X] fix source position calculation
[X] resolving typedefs
[X] resolving enums
[X] parse and resolve strings
[X] handle bools and the identifiers true and false
[X] tracking source code position (line and column)
[X] compile from a source code file
[X] type size and alignment
[X] resolve function typespecs
[X] type inference
	[X] handle var decls that dont have an explicit type, these can infer the type
      from the expr.
	[X] function args in call  
[X] type checking
	[X] function arguments in a call
	[X] compound literal args
	[X] return type
[X] resolving function bodies (statements)
[X] scoped symbols (ex: variables in function bodies)
[X] fill out expression resolution 
	[X] binary
	[X] ternary
	[X] cast
	[X] call
	[X] index
	[X] field
[X] remove redundant expr kinds: "EXPR_OR, EXPR_AND, EXPR_CMP"
[X] replace system allocations with arena allocator
[X] order independent declarations
[X] type resolution, type checking
[X] replace instances of fatal() with syntax_error() where appropriate. fatal is useful now in early development 
