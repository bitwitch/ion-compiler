
struct Vec3 {
	x: int;
	y: int;
}

enum ArrayIndex {
	ENUM_INDEX = 33,
}

const c1 = 40;
const c2 = 4;

func main(argc: int, argv: char**): int {
	implicit_size: int[] = {1,2,3,4,5};

	// make sure designated initializer for aggregate types still works
	v3 := Vec3{ x=12, y=23 };

	arr_with_explicit_index: int[] = {1,3,5,7, [10]=69};

	arr_with_elements_after_index: int[] = {1,2,3, [10]=69, 11, 12};

	arr_with_enum_designator: int[] = {2,4,6, [ENUM_INDEX]=420};

	arr_with_const_designator: int[] = {2,4,6, [c1]=666};

	arr_with_const_expr_designator: int[] = {2,4,6, [c1 + c2]=666};

	// should fail
	// sized_arr_with_designator_fail: int[12] = {2,4,6, [15]=82};

	sized_arr_with_designator: int[18] = {2,4,6, [15]=82};

	return 0;
}
