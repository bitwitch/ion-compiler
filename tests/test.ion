var global_nums: int[69];
var array_ptr = global_nums;

func test_decay1(arr: int*) { }
func test_decay2() {
	nums: int[32];
	test_decay1(nums);
	nums_ptr := nums;
}

func variadic(n: int, ...) { }

func call_it() {
	variadic(69, 1, 2, 3);
}

union Stuff {
	as_int: int;
	as_float: float;
	as_vec3: Vec3;
	as_string: String;
}

var global_int: int = 69;
var global_float = 3.14;
var h = HEIGHT + sizeof(global_int);

const HEIGHT = 400;

typedef String = char*;

func find_me() {
	str := "tacos";
	c := str[0];
	while (c < cast(char, 122)) {
	   c += cast(char, 1);
	}
 
	any: void*;
	func_ptr := cast(func(int):int, any);
	as_float := cast(float, global_int);
	arr: int[5] = {1,2,3,4,5};
}

func test1(): void {
	count := 0;
	quit := 0;
	while (!quit) {
		if (count > 99) {
			quit = 1;
		} else if (count % 2 == 0) {
			count++;
		} else {
			count += 2;
		}
	}
	fib_count := 0;
	fib_i := 0;
	do {
		fib_count++;
		fib_i++;
	} while(fib(fib_i) < 1000);
	// single line comment
	is_true := 1;
	tern_result := is_true ? 69 : 420;
	v := Vec2{3, 6};
  	x := v.x; // ooooooog
	arr: int[5] = {1,2,3,4,5};
	num := arr[3];
	ptr := &arr[2];
	num2 := ptr[-1];
	fib_result := fib(num2);
	as_float := cast(float, fib_result);
	dot_product := vec3_dot({1,2,3}, {4,5,6});
	i := 2;
	switch (v.y) {
		case 1: i += 1; break;
		case 2: i += 2; break;
		default: i = 0; break;
	}

	func_ptr: func(int): int;

	func_ptr = fib;
	fib_result2 := func_ptr(7);
	j := x / 64;
	j /= 2;

	thing := THING_ONE;

	byte: U8 = 0x69;
}

func vec3_dot(a: Vec3, b: Vec3): float {
	return a.x*b.x + a.y*b.y + a.z*b.z;
}

typedef U8 = char;

func fib(n: int): int {
	if (n == 0) { return 0; }
	prev := 0;
	result := 1;
	for (i := 1; i < n; i++) {
		new := result + prev;
		prev = result;
		result = new;
	}
	return result;
}

enum Thing {
	THING_ZERO,
	THING_ONE,
	THING_TWO,
	THING_THREE,
	THING_SEVENTEEN = 17,
	THING_EIGHTEEN,
	THING_NINETEEN,
}

func main(argc: int, argv: char**): int {
	test1();
	a := Vec3{2,4};
	b := Vec3{1,3};
	c := vec3_dot(a, b);

	idiot := fib(7);

	return 69;
}

struct Vec3 { x: float; y: float; z: float; }
struct Vec2 { x: int; y: int; }

// at the end
