import libc {printf, isprint, fprintf, stderr}
import sdl {...}

struct Window {
	sdl_window: SDL_Window*;
	sdl_renderer: SDL_Renderer*;
}

struct Int2 {
	x: int;
	y: int;
}

struct Key {
	down: bool;
	pressed: bool;
	released: bool;
}

const KEY_LSHIFT    = 256;
const KEY_RSHIFT    = 257;
const KEY_SHIFT     = 258;
const KEY_LCTRL     = 259;
const KEY_RCTRL     = 260;
const KEY_CTRL      = 261;
const KEY_LALT      = 262;
const KEY_RALT      = 263;
const KEY_ALT       = 264;
const KEY_CAPS      = 265;
const KEY_RETURN    = 266;
const KEY_SPACE     = 267;
const KEY_BACKSPACE = 268;
const KEY_ESCAPE    = 269;
const KEY_TAB       = 270;
const KEY_LEFT      = 271;
const KEY_RIGHT     = 272;
const KEY_UP        = 273;
const KEY_DOWN      = 274;

const NUM_KEYS = KEY_DOWN + 1;

// TODO(shaw): this is a temporary solution, currently for draw_rect()
var active_renderer: SDL_Renderer*;

var keys: Key[NUM_KEYS];
var CENTERED = Int2{-1, -1};

var sdl_scancode_from_noir_key: int[NUM_KEYS] = {
   [KEY_RETURN]    = SDL_SCANCODE_RETURN,
   [KEY_SPACE]     = SDL_SCANCODE_SPACE,
   [KEY_BACKSPACE] = SDL_SCANCODE_BACKSPACE,
   [KEY_TAB]       = SDL_SCANCODE_TAB,
   [KEY_ESCAPE]    = SDL_SCANCODE_ESCAPE,
   [KEY_LEFT]      = SDL_SCANCODE_LEFT,
   [KEY_RIGHT]     = SDL_SCANCODE_RIGHT,
   [KEY_UP]        = SDL_SCANCODE_UP,
   [KEY_DOWN]      = SDL_SCANCODE_DOWN,
   [KEY_LSHIFT]    = SDL_SCANCODE_LSHIFT,
   [KEY_RSHIFT]    = SDL_SCANCODE_RSHIFT,
   [KEY_LCTRL]     = SDL_SCANCODE_LCTRL,
   [KEY_RCTRL]     = SDL_SCANCODE_RCTRL,
   [KEY_LALT]      = SDL_SCANCODE_LALT,
   [KEY_RALT]      = SDL_SCANCODE_RALT
};

var noir_key_from_sdl_scancode: int[SDL_NUM_SCANCODES];

func init(): bool {
	if (SDL_Init(SDL_INIT_EVERYTHING) < 0) {
		return false;
    }

	// init key tables
	for (c := 0; c < 256; c++) {
		// initialize ascii scancodes
		if (isprint(c)) {
			str: char[] = {c, 0};
			scancode := SDL_GetScancodeFromName(str);
			if (scancode != SDL_SCANCODE_UNKNOWN) {
				sdl_scancode_from_noir_key[uchar(c)] = scancode;
			}
		}
	}
	for (key := 0; key < NUM_KEYS; key++) {
		scancode := sdl_scancode_from_noir_key[key];
		if (scancode) {
			noir_key_from_sdl_scancode[scancode] = key;
		}
	}

	return true;
}

func create_window(title: char*, pos: Int2, size: Int2): Window {
	window: Window;
	x := pos.x < 0 ? SDL_WINDOWPOS_CENTERED : pos.x;
	y := pos.y < 0 ? SDL_WINDOWPOS_CENTERED : pos.y;
    window.sdl_window = SDL_CreateWindow(title, x, y, size.x, size.y, 0);

	if (window.sdl_window) {
		window.sdl_renderer = SDL_CreateRenderer(window.sdl_window, -1, SDL_RENDERER_ACCELERATED);
	}

	// TODO: This is TEMP
	active_renderer = window.sdl_renderer;

	return window;
}

func update() {
	SDL_PumpEvents();

	sdl_key_state := SDL_GetKeyboardState(NULL);
	for (i := 0; i < NUM_KEYS; i++) {
		is_down := sdl_key_state[i];
		k := noir_key_from_sdl_scancode[i];
		was_down := keys[k].down;
		keys[k].down = is_down;
		keys[k].pressed = is_down && !was_down;
		keys[k].released = !is_down && was_down;
	}
}

func render_clear(color: uint) {
	SDL_SetRenderDrawColor(active_renderer,
		(color >> 16) & 0xFF,  // red
		(color >>  8) & 0xFF,  // green
		(color >>  0) & 0xFF,  // blue
		0xFF);                 // alpha
	SDL_RenderClear(active_renderer);
}

func render_present() {
	SDL_RenderPresent(active_renderer);
}

func destroy_window(window: Window) {
	SDL_DestroyWindow(window.sdl_window);
}


// NOTE(shaw): alpha color channel not supported currently
func draw_rect(x: int, y: int, w: int, h: int, color: uint) {
	if (!active_renderer) {
		fprintf(stderr, "Warning: draw_rect() called but there is no active_renderer\n");
		return;
	}

	SDL_SetRenderDrawColor(active_renderer,
		(color >> 16) & 0xFF,  // red
		(color >>  8) & 0xFF,  // green
		(color >>  0) & 0xFF,  // blue
		0xFF);                 // alpha
	SDL_RenderFillRect(active_renderer, &SDL_Rect{x,y,w,h});
}



// Example usage:
func main(argc: int, argv: char**): int {
	init();

	window := create_window("Title", CENTERED, {800, 600});

	while(1) {
		update();
		if (keys[KEY_RETURN].pressed) {
			printf("Return pressed\n");
		}
		if (keys[KEY_RETURN].released) {
			printf("Return released\n");
		}
	}

	destroy_window(window);
	return 0;
}

